{"ast":null,"code":"var _jsxFileName = \"/Users/moomin/Front-end/react/todoapp/src/components/todo/AddTodo.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\nimport addTodoStyle from \"./AddTodo.module.css\";\nimport { Alert } from \"../ui/Modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddTodo({\n  setTodoList\n}) {\n  _s();\n  // ref부터 만든다.\n  const taskRef = useRef();\n  const dueDateRef = useRef();\n  const alertRef = useRef();\n  let alertMessages = [];\n  if (!task) {}\n  if (!dueDate) {}\n\n  // task 내용과 duedate내용을 가져와서 setTodoList에 추가\n  const onClickAddButtonHandler = () => {\n    const task = taskRef.current.value;\n    const dueDate = dueDateRef.current.value;\n\n    // Modal을 위한 조건\n    if (!task || !dueDate) {\n      // show에 전달할 배열을 만들어서 넣어줘야 함.\n      alertRef.current.show([\"task를 입력하세요.\", \"due date를 입력하세요.\"]);\n      //alert(\"내용을 입력해야 합니다.\");\n      return;\n    }\n\n    // 값을 가져와서 setTodoList 호출. -> 새롭게 추가한것만 배열에 넣어야 함.\n    //prevTodoList최신의 스테이트 -> 배열로 만들어야함.\n    // 객체리터럴로 넣어줌. 그렇게 만들었으니까.\n    // 앞에 넣어주면 배열의 가장 앞에 들어감. 반대의 경우 제일 밑.\n    setTodoList(prevTodoList => [{\n      id: prevTodoList.length,\n      // 0-1-2-3-4-5 순으로 증가하므로 length로 준다.\n      isDone: false,\n      task,\n      // value가 task로 같으므로 생략 가능\n      dueDate // 마찬가지로 생략 가능\n    }, ...prevTodoList]);\n\n    // 입력값 초기화\n    taskRef.current.value = \"\";\n    dueDateRef.current.value = \"\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: addTodoStyle.addTodoWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: addTodoStyle.addTodoLabel,\n      htmlFor: \"task\",\n      children: \"Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: addTodoStyle.addTodoInput,\n      type: \"text\",\n      id: \"task\",\n      placeholder: \"Input Task\",\n      ref: taskRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: addTodoStyle.addTodoLabel,\n      htmlFor: \"due-date\",\n      children: \"Due Date\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      id: \"due-date\",\n      ref: dueDateRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: addTodoStyle.addTodoButton,\n      onClick: onClickAddButtonHandler,\n      children: \"\\uB4F1\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      alertRef: alertRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(AddTodo, \"GaE9xjySr1WCeEmBASGhv9KGgIk=\");\n_c = AddTodo;\nvar _c;\n$RefreshReg$(_c, \"AddTodo\");","map":{"version":3,"names":["useRef","useState","addTodoStyle","Alert","jsxDEV","_jsxDEV","AddTodo","setTodoList","_s","taskRef","dueDateRef","alertRef","alertMessages","task","dueDate","onClickAddButtonHandler","current","value","show","prevTodoList","id","length","isDone","className","addTodoWrapper","children","addTodoLabel","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","addTodoInput","type","placeholder","ref","addTodoButton","onClick","_c","$RefreshReg$"],"sources":["/Users/moomin/Front-end/react/todoapp/src/components/todo/AddTodo.js"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport addTodoStyle from \"./AddTodo.module.css\";\nimport { Alert } from \"../ui/Modal\";\n\nexport default function AddTodo({ setTodoList }) {\n  // ref부터 만든다.\n  const taskRef = useRef();\n  const dueDateRef = useRef();\n\n  const alertRef = useRef();\n\n  let alertMessages = [];\n\n  if (!task) {\n  }\n\n  if (!dueDate) {\n  }\n\n  // task 내용과 duedate내용을 가져와서 setTodoList에 추가\n  const onClickAddButtonHandler = () => {\n    const task = taskRef.current.value;\n    const dueDate = dueDateRef.current.value;\n\n    // Modal을 위한 조건\n    if (!task || !dueDate) {\n      // show에 전달할 배열을 만들어서 넣어줘야 함.\n      alertRef.current.show([\"task를 입력하세요.\", \"due date를 입력하세요.\"]);\n      //alert(\"내용을 입력해야 합니다.\");\n      return;\n    }\n\n    // 값을 가져와서 setTodoList 호출. -> 새롭게 추가한것만 배열에 넣어야 함.\n    //prevTodoList최신의 스테이트 -> 배열로 만들어야함.\n    // 객체리터럴로 넣어줌. 그렇게 만들었으니까.\n    // 앞에 넣어주면 배열의 가장 앞에 들어감. 반대의 경우 제일 밑.\n    setTodoList((prevTodoList) => [\n      {\n        id: prevTodoList.length, // 0-1-2-3-4-5 순으로 증가하므로 length로 준다.\n        isDone: false,\n        task, // value가 task로 같으므로 생략 가능\n        dueDate, // 마찬가지로 생략 가능\n      },\n      ...prevTodoList,\n    ]);\n\n    // 입력값 초기화\n    taskRef.current.value = \"\";\n    dueDateRef.current.value = \"\";\n  };\n\n  return (\n    <div className={addTodoStyle.addTodoWrapper}>\n      <label className={addTodoStyle.addTodoLabel} htmlFor=\"task\">\n        Task\n      </label>\n      <input\n        className={addTodoStyle.addTodoInput}\n        type=\"text\"\n        id=\"task\"\n        placeholder=\"Input Task\"\n        ref={taskRef}\n      />\n\n      <label className={addTodoStyle.addTodoLabel} htmlFor=\"due-date\">\n        Due Date\n      </label>\n      <input type=\"date\" id=\"due-date\" ref={dueDateRef} />\n\n      <button\n        className={addTodoStyle.addTodoButton}\n        onClick={onClickAddButtonHandler}\n      >\n        등록\n      </button>\n\n      <Alert alertRef={alertRef} />\n    </div>\n  );\n}\n"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACxC,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,SAASC,KAAK,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,eAAe,SAASC,OAAOA,CAAC;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EAC/C;EACA,MAAMC,OAAO,GAAGT,MAAM,CAAC,CAAC;EACxB,MAAMU,UAAU,GAAGV,MAAM,CAAC,CAAC;EAE3B,MAAMW,QAAQ,GAAGX,MAAM,CAAC,CAAC;EAEzB,IAAIY,aAAa,GAAG,EAAE;EAEtB,IAAI,CAACC,IAAI,EAAE,CACX;EAEA,IAAI,CAACC,OAAO,EAAE,CACd;;EAEA;EACA,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;IACpC,MAAMF,IAAI,GAAGJ,OAAO,CAACO,OAAO,CAACC,KAAK;IAClC,MAAMH,OAAO,GAAGJ,UAAU,CAACM,OAAO,CAACC,KAAK;;IAExC;IACA,IAAI,CAACJ,IAAI,IAAI,CAACC,OAAO,EAAE;MACrB;MACAH,QAAQ,CAACK,OAAO,CAACE,IAAI,CAAC,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;MAC3D;MACA;IACF;;IAEA;IACA;IACA;IACA;IACAX,WAAW,CAAEY,YAAY,IAAK,CAC5B;MACEC,EAAE,EAAED,YAAY,CAACE,MAAM;MAAE;MACzBC,MAAM,EAAE,KAAK;MACbT,IAAI;MAAE;MACNC,OAAO,CAAE;IACX,CAAC,EACD,GAAGK,YAAY,CAChB,CAAC;;IAEF;IACAV,OAAO,CAACO,OAAO,CAACC,KAAK,GAAG,EAAE;IAC1BP,UAAU,CAACM,OAAO,CAACC,KAAK,GAAG,EAAE;EAC/B,CAAC;EAED,oBACEZ,OAAA;IAAKkB,SAAS,EAAErB,YAAY,CAACsB,cAAe;IAAAC,QAAA,gBAC1CpB,OAAA;MAAOkB,SAAS,EAAErB,YAAY,CAACwB,YAAa;MAACC,OAAO,EAAC,MAAM;MAAAF,QAAA,EAAC;IAE5D;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACR1B,OAAA;MACEkB,SAAS,EAAErB,YAAY,CAAC8B,YAAa;MACrCC,IAAI,EAAC,MAAM;MACXb,EAAE,EAAC,MAAM;MACTc,WAAW,EAAC,YAAY;MACxBC,GAAG,EAAE1B;IAAQ;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC,eAEF1B,OAAA;MAAOkB,SAAS,EAAErB,YAAY,CAACwB,YAAa;MAACC,OAAO,EAAC,UAAU;MAAAF,QAAA,EAAC;IAEhE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACR1B,OAAA;MAAO4B,IAAI,EAAC,MAAM;MAACb,EAAE,EAAC,UAAU;MAACe,GAAG,EAAEzB;IAAW;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEpD1B,OAAA;MACEkB,SAAS,EAAErB,YAAY,CAACkC,aAAc;MACtCC,OAAO,EAAEtB,uBAAwB;MAAAU,QAAA,EAClC;IAED;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAET1B,OAAA,CAACF,KAAK;MAACQ,QAAQ,EAAEA;IAAS;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEV;AAACvB,EAAA,CA3EuBF,OAAO;AAAAgC,EAAA,GAAPhC,OAAO;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}