{"ast":null,"code":"var _jsxFileName = \"/Users/moomin/Front-end/react/todoapp/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Todo from \"./components/todo/Todo\";\nimport AddTodo from \"./components/todo/AddTodo\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const todoItemList = [{\n    id: 0,\n    isDone: true,\n    task: \"ref\",\n    dueDate: \"2024-11-19\"\n  }, {\n    id: 1,\n    isDone: false,\n    task: \"ContextAPI\",\n    dueDate: \"2024-11-20\"\n  }];\n  const [todoList, setTodoList] = useState(todoItemList);\n\n  // 하나만 바꿀 것이기 때문에 event가 필요.\n  const onDoneHandler = event => {\n    const checkedDoneId = parseInt(event.target.value);\n    const isChecked = event.target.checked;\n\n    // 배열 카피를 해서 새로운 메모리를 생성 -> isDone의 값을 바꿀 수 없다. 그리고 최신 아이템 확신 못함.\n    //setTodoList([...todoList]);\n    // ()안에 함수를 넣어버린다.\n    // 앞에는 이전까지 관리하던 가장 최신의 state\n    // map -> 새로운 메모리주소를 참조하는 새 배열을 만들어서 반환함. [...]을 사용할 필요가 없음.\n    setTodoList(prevTodoItemList => prevTodoItemList.map(todo => {\n      if (todo.id === checkedDoneId) {\n        todo.isDone = isChecked; // 체크를 했던 todo는 값이 바뀌어서 반환된다.\n      }\n      return todo;\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: todoList.map(todo => /*#__PURE__*/_jsxDEV(Todo, {\n          todo: todo,\n          onClickDoneHandler: onDoneHandler\n        }, todo.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddTodo, {\n        setTodoList: setTodoList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"dfJ32QavO/dhVitQm4yMhG47/b8=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Todo","AddTodo","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","todoItemList","id","isDone","task","dueDate","todoList","setTodoList","onDoneHandler","event","checkedDoneId","parseInt","target","value","isChecked","checked","prevTodoItemList","map","todo","children","onClickDoneHandler","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/moomin/Front-end/react/todoapp/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport Todo from \"./components/todo/Todo\";\nimport AddTodo from \"./components/todo/AddTodo\";\n\nexport default function App() {\n  const todoItemList = [\n    { id: 0, isDone: true, task: \"ref\", dueDate: \"2024-11-19\" },\n    { id: 1, isDone: false, task: \"ContextAPI\", dueDate: \"2024-11-20\" },\n  ];\n\n  const [todoList, setTodoList] = useState(todoItemList);\n\n  // 하나만 바꿀 것이기 때문에 event가 필요.\n  const onDoneHandler = (event) => {\n    const checkedDoneId = parseInt(event.target.value);\n    const isChecked = event.target.checked;\n\n    // 배열 카피를 해서 새로운 메모리를 생성 -> isDone의 값을 바꿀 수 없다. 그리고 최신 아이템 확신 못함.\n    //setTodoList([...todoList]);\n    // ()안에 함수를 넣어버린다.\n    // 앞에는 이전까지 관리하던 가장 최신의 state\n    // map -> 새로운 메모리주소를 참조하는 새 배열을 만들어서 반환함. [...]을 사용할 필요가 없음.\n    setTodoList((prevTodoItemList) =>\n      prevTodoItemList.map((todo) => {\n        if (todo.id === checkedDoneId) {\n          todo.isDone = isChecked; // 체크를 했던 todo는 값이 바뀌어서 반환된다.\n        }\n        return todo;\n      })\n    );\n  };\n\n  return (\n    <>\n      <div>\n        <ul>\n          {todoList.map((todo) => (\n            <Todo\n              key={todo.id}\n              todo={todo}\n              onClickDoneHandler={onDoneHandler}\n            />\n          ))}\n        </ul>\n        {/* 일정추가 */}\n        <AddTodo setTodoList={setTodoList} />\n      </div>\n    </>\n  );\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,OAAO,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEhD,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAMC,YAAY,GAAG,CACnB;IAAEC,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAE,IAAI;IAAEC,IAAI,EAAE,KAAK;IAAEC,OAAO,EAAE;EAAa,CAAC,EAC3D;IAAEH,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAE,KAAK;IAAEC,IAAI,EAAE,YAAY;IAAEC,OAAO,EAAE;EAAa,CAAC,CACpE;EAED,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAACS,YAAY,CAAC;;EAEtD;EACA,MAAMO,aAAa,GAAIC,KAAK,IAAK;IAC/B,MAAMC,aAAa,GAAGC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC;IAClD,MAAMC,SAAS,GAAGL,KAAK,CAACG,MAAM,CAACG,OAAO;;IAEtC;IACA;IACA;IACA;IACA;IACAR,WAAW,CAAES,gBAAgB,IAC3BA,gBAAgB,CAACC,GAAG,CAAEC,IAAI,IAAK;MAC7B,IAAIA,IAAI,CAAChB,EAAE,KAAKQ,aAAa,EAAE;QAC7BQ,IAAI,CAACf,MAAM,GAAGW,SAAS,CAAC,CAAC;MAC3B;MACA,OAAOI,IAAI;IACb,CAAC,CACH,CAAC;EACH,CAAC;EAED,oBACEtB,OAAA,CAAAE,SAAA;IAAAqB,QAAA,eACEvB,OAAA;MAAAuB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,EACGb,QAAQ,CAACW,GAAG,CAAEC,IAAI,iBACjBtB,OAAA,CAACH,IAAI;UAEHyB,IAAI,EAAEA,IAAK;UACXE,kBAAkB,EAAEZ;QAAc,GAF7BU,IAAI,CAAChB,EAAE;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGb,CACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eAEL5B,OAAA,CAACF,OAAO;QAACa,WAAW,EAAEA;MAAY;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC;EAAC,gBACN,CAAC;AAEP;AAACxB,EAAA,CA7CuBD,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}