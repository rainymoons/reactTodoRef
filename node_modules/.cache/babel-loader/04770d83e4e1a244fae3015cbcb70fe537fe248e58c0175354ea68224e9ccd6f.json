{"ast":null,"code":"var _jsxFileName = \"/Users/moomin/Front-end/react/todoapp/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Todo from \"./components/todo/Todo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const todoItemList = [{\n    id: 0,\n    isDone: true,\n    task: \"ref\",\n    dueDate: \"2024-11-19\"\n  }, {\n    id: 1,\n    isDone: false,\n    task: \"ContextAPI\",\n    dueDate: \"2024-11-20\"\n  }];\n  const [todoList, setTodoList] = useState(todoItemList);\n\n  // 하나만 바꿀 것이기 때문에 event가 필요.\n  const onDoneHandler = event => {\n    const checkedDoneId = parseInt(event.target.value);\n    const isChecked = event.target.checked;\n\n    // 배열 카피를 해서 새로운 메모리를 생성 -> isDone의 값을 바꿀 수 없다.\n    // setTodoList([...todoList]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: todoList.map(todo => /*#__PURE__*/_jsxDEV(Todo, {\n      todo: todo,\n      onClickDoneHandler: onDoneHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dfJ32QavO/dhVitQm4yMhG47/b8=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Todo","jsxDEV","_jsxDEV","App","_s","todoItemList","id","isDone","task","dueDate","todoList","setTodoList","onDoneHandler","event","checkedDoneId","parseInt","target","value","isChecked","checked","children","map","todo","onClickDoneHandler","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/moomin/Front-end/react/todoapp/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport Todo from \"./components/todo/Todo\";\n\nexport default function App() {\n  const todoItemList = [\n    { id: 0, isDone: true, task: \"ref\", dueDate: \"2024-11-19\" },\n    { id: 1, isDone: false, task: \"ContextAPI\", dueDate: \"2024-11-20\" },\n  ];\n\n  const [todoList, setTodoList] = useState(todoItemList);\n\n  // 하나만 바꿀 것이기 때문에 event가 필요.\n  const onDoneHandler = (event) => {\n    const checkedDoneId = parseInt(event.target.value);\n    const isChecked = event.target.checked;\n\n    // 배열 카피를 해서 새로운 메모리를 생성 -> isDone의 값을 바꿀 수 없다.\n    // setTodoList([...todoList]);\n  };\n\n  return (\n    <ul>\n      {todoList.map((todo) => (\n        <Todo todo={todo} onClickDoneHandler={onDoneHandler} />\n      ))}\n    </ul>\n  );\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAMC,YAAY,GAAG,CACnB;IAAEC,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAE,IAAI;IAAEC,IAAI,EAAE,KAAK;IAAEC,OAAO,EAAE;EAAa,CAAC,EAC3D;IAAEH,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAE,KAAK;IAAEC,IAAI,EAAE,YAAY;IAAEC,OAAO,EAAE;EAAa,CAAC,CACpE;EAED,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAACM,YAAY,CAAC;;EAEtD;EACA,MAAMO,aAAa,GAAIC,KAAK,IAAK;IAC/B,MAAMC,aAAa,GAAGC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC;IAClD,MAAMC,SAAS,GAAGL,KAAK,CAACG,MAAM,CAACG,OAAO;;IAEtC;IACA;EACF,CAAC;EAED,oBACEjB,OAAA;IAAAkB,QAAA,EACGV,QAAQ,CAACW,GAAG,CAAEC,IAAI,iBACjBpB,OAAA,CAACF,IAAI;MAACsB,IAAI,EAAEA,IAAK;MAACC,kBAAkB,EAAEX;IAAc;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACvD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAET;AAACvB,EAAA,CAxBuBD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}