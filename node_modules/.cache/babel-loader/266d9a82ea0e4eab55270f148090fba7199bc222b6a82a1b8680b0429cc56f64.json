{"ast":null,"code":"var _jsxFileName = \"/Users/moomin/Front-end/react/todoappRef/src/components/todo/contexts/TodoContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\n// state interface (context)\n// 1. state의 원형 제작\n//  1-1. state를 변경시킬 함수들의 원형을 제작. (객체 리터럴 형태로)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TodoContext = /*#__PURE__*/createContext({\n  // 아래를 작성하는 이유. 나중에 자동완성 기능을 쓰기 위해\n  contextTodo: [],\n  // event를 받는 이유? checkbox를 체크 / 체크해제 했을 때, 해당 checkbox값을 얻어 오기 위해서.\n  contextDone(event) {},\n  contextAddTodo(task, dueDate, alertRef) {}\n});\n\n// 2. state interface implementation (Contextprovider)\n//  2-1. context의 함수들(1-1)을 구현.\nexport function TodoContextProvider({\n  children\n}) {\n  _s();\n  // 왜 여기서 state를 또 만드냐? 위에서 만든건 인터페이스\n  // 가져야 하는 초기값은 배열.\n  const [todo, setTodo] = useState([]);\n  // 이렇게 state를 만들면 위에 넣어준다.\n\n  const contextImplementation = {\n    // app.js에서 가져옴.\n    contextTodo: todo,\n    // todo 자체가 배열\n    contextDone(event) {\n      const checkedDoneId = parseInt(event.target.value);\n      const isChecked = event.target.checked;\n\n      // state를 setTodoList가 아닌 setTodo가 호출되도록 변경\n      setTodo(prevTodoItemList => prevTodoItemList.map(todo => {\n        if (todo.id === checkedDoneId) {\n          todo.isDone = isChecked; // 체크를 했던 todo는 값이 바뀌어서 반환된다.\n        }\n        return todo;\n      }));\n    },\n    contextAddTodo(task, dueDate, alertRef) {\n      let alertMessages = [];\n      if (!task) {\n        alertMessages.push(\"task를 입력하세요.\");\n      }\n      if (!dueDate) {\n        alertMessages.push(\"due date를 입력하세요.\");\n      }\n\n      // Modal을 위한 조건\n      if (!task || !dueDate) {\n        // show에 전달할 배열을 만들어서 넣어줘야 함.\n        alertRef.current.show(alertMessages);\n        //alert(\"내용을 입력해야 합니다.\");\n        return;\n      }\n\n      // 값을 가져와서 setTodoList 호출. -> 새롭게 추가한것만 배열에 넣어야 함.\n      //prevTodoList최신의 스테이트 -> 배열로 만들어야함.\n      // 객체 리터럴로 넣어줌. 그렇게 만들었으니까.\n      // 앞에 넣어주면 배열의 가장 앞에 들어감. 반대의 경우 제일 밑.\n      setTodo(prevTodoList => [{\n        id: prevTodoList.length,\n        // 0-1-2-3-4-5 순으로 증가하므로 length로 준다.\n        isDone: false,\n        task,\n        // value가 task로 같으므로 생략 가능\n        dueDate // 마찬가지로 생략 가능\n      }, ...prevTodoList]);\n    }\n  };\n\n  // 3. ContextProvider를 전역으로 구성.\n  //  3-1. ContextProvider를 사용할 컴포넌트들을 관리.\n  return /*#__PURE__*/_jsxDEV(TodoContext.Provider, {\n    value: contextImplementation,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(TodoContextProvider, \"GeUVAlNxBowLCZ198JwHYbeDH5o=\");\n_c = TodoContextProvider;\nvar _c;\n$RefreshReg$(_c, \"TodoContextProvider\");","map":{"version":3,"names":["createContext","useState","jsxDEV","_jsxDEV","TodoContext","contextTodo","contextDone","event","contextAddTodo","task","dueDate","alertRef","TodoContextProvider","children","_s","todo","setTodo","contextImplementation","checkedDoneId","parseInt","target","value","isChecked","checked","prevTodoItemList","map","id","isDone","alertMessages","push","current","show","prevTodoList","length","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/moomin/Front-end/react/todoappRef/src/components/todo/contexts/TodoContext.js"],"sourcesContent":["import { createContext, useState } from \"react\";\n// state interface (context)\n// 1. state의 원형 제작\n//  1-1. state를 변경시킬 함수들의 원형을 제작. (객체 리터럴 형태로)\nexport const TodoContext = createContext({\n  // 아래를 작성하는 이유. 나중에 자동완성 기능을 쓰기 위해\n  contextTodo: [],\n  // event를 받는 이유? checkbox를 체크 / 체크해제 했을 때, 해당 checkbox값을 얻어 오기 위해서.\n  contextDone(event) {},\n  contextAddTodo(task, dueDate, alertRef) {},\n});\n\n// 2. state interface implementation (Contextprovider)\n//  2-1. context의 함수들(1-1)을 구현.\nexport function TodoContextProvider({ children }) {\n  // 왜 여기서 state를 또 만드냐? 위에서 만든건 인터페이스\n  // 가져야 하는 초기값은 배열.\n  const [todo, setTodo] = useState([]);\n  // 이렇게 state를 만들면 위에 넣어준다.\n\n  const contextImplementation = {\n    // app.js에서 가져옴.\n    contextTodo: todo, // todo 자체가 배열\n    contextDone(event) {\n      const checkedDoneId = parseInt(event.target.value);\n      const isChecked = event.target.checked;\n\n      // state를 setTodoList가 아닌 setTodo가 호출되도록 변경\n      setTodo((prevTodoItemList) =>\n        prevTodoItemList.map((todo) => {\n          if (todo.id === checkedDoneId) {\n            todo.isDone = isChecked; // 체크를 했던 todo는 값이 바뀌어서 반환된다.\n          }\n          return todo;\n        })\n      );\n    },\n    contextAddTodo(task, dueDate, alertRef) {\n      let alertMessages = [];\n      if (!task) {\n        alertMessages.push(\"task를 입력하세요.\");\n      }\n\n      if (!dueDate) {\n        alertMessages.push(\"due date를 입력하세요.\");\n      }\n\n      // Modal을 위한 조건\n      if (!task || !dueDate) {\n        // show에 전달할 배열을 만들어서 넣어줘야 함.\n        alertRef.current.show(alertMessages);\n        //alert(\"내용을 입력해야 합니다.\");\n        return;\n      }\n\n      // 값을 가져와서 setTodoList 호출. -> 새롭게 추가한것만 배열에 넣어야 함.\n      //prevTodoList최신의 스테이트 -> 배열로 만들어야함.\n      // 객체 리터럴로 넣어줌. 그렇게 만들었으니까.\n      // 앞에 넣어주면 배열의 가장 앞에 들어감. 반대의 경우 제일 밑.\n      setTodo((prevTodoList) => [\n        {\n          id: prevTodoList.length, // 0-1-2-3-4-5 순으로 증가하므로 length로 준다.\n          isDone: false,\n          task, // value가 task로 같으므로 생략 가능\n          dueDate, // 마찬가지로 생략 가능\n        },\n        ...prevTodoList,\n      ]);\n    },\n  };\n\n  // 3. ContextProvider를 전역으로 구성.\n  //  3-1. ContextProvider를 사용할 컴포넌트들을 관리.\n  return (\n    <TodoContext.Provider value={contextImplementation}>\n      {children}\n    </TodoContext.Provider>\n  );\n}\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAC/C;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,CAAC;EACvC;EACAK,WAAW,EAAE,EAAE;EACf;EACAC,WAAWA,CAACC,KAAK,EAAE,CAAC,CAAC;EACrBC,cAAcA,CAACC,IAAI,EAAEC,OAAO,EAAEC,QAAQ,EAAE,CAAC;AAC3C,CAAC,CAAC;;AAEF;AACA;AACA,OAAO,SAASC,mBAAmBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAChD;EACA;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACpC;;EAEA,MAAMgB,qBAAqB,GAAG;IAC5B;IACAZ,WAAW,EAAEU,IAAI;IAAE;IACnBT,WAAWA,CAACC,KAAK,EAAE;MACjB,MAAMW,aAAa,GAAGC,QAAQ,CAACZ,KAAK,CAACa,MAAM,CAACC,KAAK,CAAC;MAClD,MAAMC,SAAS,GAAGf,KAAK,CAACa,MAAM,CAACG,OAAO;;MAEtC;MACAP,OAAO,CAAEQ,gBAAgB,IACvBA,gBAAgB,CAACC,GAAG,CAAEV,IAAI,IAAK;QAC7B,IAAIA,IAAI,CAACW,EAAE,KAAKR,aAAa,EAAE;UAC7BH,IAAI,CAACY,MAAM,GAAGL,SAAS,CAAC,CAAC;QAC3B;QACA,OAAOP,IAAI;MACb,CAAC,CACH,CAAC;IACH,CAAC;IACDP,cAAcA,CAACC,IAAI,EAAEC,OAAO,EAAEC,QAAQ,EAAE;MACtC,IAAIiB,aAAa,GAAG,EAAE;MACtB,IAAI,CAACnB,IAAI,EAAE;QACTmB,aAAa,CAACC,IAAI,CAAC,cAAc,CAAC;MACpC;MAEA,IAAI,CAACnB,OAAO,EAAE;QACZkB,aAAa,CAACC,IAAI,CAAC,kBAAkB,CAAC;MACxC;;MAEA;MACA,IAAI,CAACpB,IAAI,IAAI,CAACC,OAAO,EAAE;QACrB;QACAC,QAAQ,CAACmB,OAAO,CAACC,IAAI,CAACH,aAAa,CAAC;QACpC;QACA;MACF;;MAEA;MACA;MACA;MACA;MACAZ,OAAO,CAAEgB,YAAY,IAAK,CACxB;QACEN,EAAE,EAAEM,YAAY,CAACC,MAAM;QAAE;QACzBN,MAAM,EAAE,KAAK;QACblB,IAAI;QAAE;QACNC,OAAO,CAAE;MACX,CAAC,EACD,GAAGsB,YAAY,CAChB,CAAC;IACJ;EACF,CAAC;;EAED;EACA;EACA,oBACE7B,OAAA,CAACC,WAAW,CAAC8B,QAAQ;IAACb,KAAK,EAAEJ,qBAAsB;IAAAJ,QAAA,EAChDA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACxB,EAAA,CAhEeF,mBAAmB;AAAA2B,EAAA,GAAnB3B,mBAAmB;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}